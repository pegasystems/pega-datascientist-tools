:py:mod:`pdstools.plots.plot_base`
==================================

.. py:module:: pdstools.plots.plot_base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pdstools.plots.plot_base.Plots




.. py:class:: Plots

   .. py:property:: AvailableVisualisations


   .. py:property:: ApplicableVisualisations


   .. py:method:: plotApplicable()


   .. py:method:: top_n(df, top_n, to_plot='PerformanceBin')
      :staticmethod:


   .. py:method:: _subset_data(table: str, required_columns: set, query: Union[str, Dict[str, list]] = None, multi_snapshot: bool = False, last: bool = False, active_only: bool = False) -> pandas.DataFrame

      Retrieves and subsets the data and performs some assertion checks

      :param table: Which table to retrieve from the ADMDatamart object
                    (modelData, predictorData or combinedData)
      :type table: str
      :param required_columns: Which columns we want to use for the visualisation
                               Asserts those columns are in the data, and returns only those columns for efficiency
                               By default, the context keys are added as required columns.
      :type required_columns: set
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None
      :param multi_snapshot: Whether to make sure there are multiple snapshots present in the data
                             Sometimes required for visualisations over time
      :type multi_snapshot: bool, default = None
      :param last: Whether to subset on just the last known value for each model ID/predictor/bin
      :type last: bool, default = False
      :param active_only: Whether to subset on just the active predictors
      :type active_only: bool, default = False

      :returns: The subsetted dataframe
      :rtype: pd.DataFrame


   .. py:method:: plotPerformanceSuccessRateBubbleChart(last: bool = True, add_bottom_left_text: bool = True, query: Union[str, dict] = None, facets: Optional[list] = None, **kwargs) -> Union[matplotlib.pyplot.Axes, plotly.graph_objs.FigureWidget]

      Creates bubble chart similar to ADM OOTB.

      :param last: Whether to only look at the last snapshot (recommended)
      :type last: bool, default = True
      :param add_bottom_left_text: Whether to display how many models are in the bottom left of the chart
                                   In other words, who have no performance and no success rate
      :type add_bottom_left_text: bool, default = True
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None
      :param facets: Whether to add facets to the plot, should be a list of columns
      :type facets: list, default = None

      :keyword round: To how many digits to round the hover data
      :kwtype round: int, default = 5
      :keyword plotting_engine: One of {plotly, mpl}, see ADMDatamart class
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool

      .. rubric:: Notes

      See the docs for either the matplotlib plots (plots_mpl.py) or the
      plotly plots (plots_plotly.py). Some visualisations have parameters
      that differ slightly between the two, and plotly has an additional
      post_plot function defining some more actions, such as writing to
      html automatically or displaying figures while facetting.

      :rtype: (plt.Axes, go.FigureWidget)


   .. py:method:: plotPerformanceAndSuccessRateOverTime(day_interval: int = 7, query: Union[str, dict] = None, **kwargs) -> matplotlib.pyplot.Axes

      Plots both performance and success rate over time

      Currently only supported for matplotlib.

      :param day_interval: The interval of tick labels along the x axis
      :type day_interval: int, default = 7
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None

      :keyword figsize: The size of the graph
      :kwtype figsize: tuple
      :keyword plotting_engine: This chart is only supported in matplotlib (mpl)
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool

      .. rubric:: Notes

      See the docs for the matplotlib plots (plots_mpl.py).

      :rtype: plt.Axes


   .. py:method:: plotOverTime(metric: str = 'Performance', by: str = 'ModelID', query: Union[str, dict] = None, facets: Optional[list] = None, **kwargs) -> Union[matplotlib.pyplot.Axes, plotly.graph_objs.FigureWidget]

      Plots a given metric over time

      :param metric: The metric to plot over time. One of the following:
                     {ResponseCount, Performance, SuccessRate, Positives}
      :type metric: str, default = Performance
      :param by: What variable to group the data by
                 One of {ModelID, ModelName}
      :type by: str, default = ModelID
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None
      :param facets: Whether to add facets to the plot, should be a list of columns
      :type facets: list, default = None

      :keyword plotting_engine: One of {plotly, mpl}, see ADMDatamart class
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool

      .. rubric:: Notes

      See the docs for either the matplotlib plots (plots_mpl.py) or the
      plotly plots (plots_plotly.py). Some visualisations have parameters
      that differ slightly between the two, and plotly has an additional
      post_plot function defining some more actions, such as writing to
      html automatically or displaying figures while facetting.

      :rtype: (plt.Axes, go.FigureWidget)


   .. py:method:: plotResponseCountMatrix(lookback: int = 15, fill_null_days: bool = False, query: Union[str, dict] = None, **kwargs) -> matplotlib.pyplot.Axes

      Plots the response count over time in a matrix

      :param lookback: How many days to look back from the last snapshot
      :type lookback: int, default = 15
      :param fill_null_days: If True, null values will be generated for days without a snapshot
      :type fill_null_days: bool, default = False
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None

      :keyword plotting_engine: This chart is only supported in matplotlib (mpl)
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool

      .. rubric:: Notes

      See the docs for the matplotlib plots (plots_mpl.py).

      :rtype: plt.Axes


   .. py:method:: plotPropositionSuccessRates(metric: str = 'SuccessRate', by: str = 'ModelName', show_error: bool = True, query: Union[str, dict] = None, facets: Optional[list] = None, **kwargs) -> Union[matplotlib.pyplot.Axes, plotly.graph_objs.FigureWidget]

      Plots all latest proposition success rates

      :param metric: Can be changed to plot a different metric
      :type metric: str, default = SuccessRate
      :param by: What variable to group the data by
                 One of {ModelID, ModelName}
      :type by: str, default = ModelName
      :param show_error: Whether to show error bars in the bar plots
      :type show_error: bool, default = True
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None
      :param facets: Whether to add facets to the plot, should be a list of columns
      :type facets: list, default = None

      :keyword plotting_engine: One of {plotly, mpl}, see ADMDatamart class
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool

      .. rubric:: Notes

      See the docs for either the matplotlib plots (plots_mpl.py) or the
      plotly plots (plots_plotly.py). Some visualisations have parameters
      that differ slightly between the two, and plotly has an additional
      post_plot function defining some more actions, such as writing to
      html automatically or displaying figures while facetting.

      :rtype: (plt.Axes, go.FigureWidget)


   .. py:method:: plotScoreDistribution(by: str = 'ModelID', show_zero_responses: bool = False, query: Union[str, dict] = None, **kwargs) -> Union[matplotlib.pyplot.Axes, plotly.graph_objs.FigureWidget]

      Plots the score distribution, similar to OOTB

      :param by: What variable to group the data by
                 One of {ModelID, ModelName}
      :type by: str, default = ModelName
      :param show_zero_responses: Whether to include bins with no responses at all
      :type show_zero_responses: bool, default = False
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None

      :keyword plotting_engine: One of {plotly, mpl}, see ADMDatamart class
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool

      .. rubric:: Notes

      See the docs for either the matplotlib plots (plots_mpl.py) or the
      plotly plots (plots_plotly.py). Some visualisations have parameters
      that differ slightly between the two, and plotly has an additional
      post_plot function defining some more actions, such as writing to
      html automatically or displaying figures while facetting.

      :rtype: (plt.Axes, go.FigureWidget)


   .. py:method:: plotPredictorBinning(predictors: list = None, modelids: list = None, query: Union[str, dict] = None, **kwargs) -> Union[matplotlib.pyplot.Axes, plotly.graph_objs.FigureWidget]

      Plots the binning of given predictors

      :param predictors: An optional list of predictors to plot the bins for
                         Useful for plotting one or more variables over multiple models
      :type predictors: list, default = None
      :param modelids: An optional list of model ids to plot the predictors for
      :type modelids: list, default = None
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None

      :keyword plotting_engine: One of {plotly, mpl}, see ADMDatamart class
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool
      :keyword Additional keyword arguments:
      :keyword ----------------------------:
      :keyword See the docs for either the matplotlib plots (plots_mpl.py) or the:
      :keyword plotly plots (plots_plotly.py). Some visualisations have parameters:
      :keyword that differ slightly between the two, and plotly has an additional:
      :keyword post_plot function defining some more actions, such as writing to:
      :keyword html automatically or displaying figures while facetting.:

      :rtype: (plt.Axes, go.FigureWidget)


   .. py:method:: plotPredictorPerformance(top_n: int = 0, active_only: bool = False, to_plot='Performance', query: Union[str, dict] = None, facets: Optional[list] = None, **kwargs) -> Union[matplotlib.pyplot.Axes, plotly.graph_objs.FigureWidget]

      Plots a bar chart of the performance of the predictors

      By default, this plot shows the performance over all models
      Use the querying functionality to drill down into a more specific subset

      :param top_n: How many of the top predictors to show in the plot
      :type top_n: int, default = 0
      :param active_only: Whether to only plot active predictors
      :type active_only: bool, default = False
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None
      :param facets: Whether to add facets to the plot, should be a list of columns
      :type facets: list, default = None

      :keyword categorization: Optional argument to supply your own predictor categorization method
                               Useful if you want to be more specific in the legend of the plot
                               Function should return a string from a string
      :kwtype categorization: method
      :keyword plotting_engine: One of {plotly, mpl}, see ADMDatamart class
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool
      :keyword Additional keyword arguments:
      :keyword ----------------------------:
      :keyword See the docs for either the matplotlib plots (plots_mpl.py) or the:
      :keyword plotly plots (plots_plotly.py). Some visualisations have parameters:
      :keyword that differ slightly between the two, and plotly has an additional:
      :keyword post_plot function defining some more actions, such as writing to:
      :keyword html automatically or displaying figures while facetting.:

      :rtype: (plt.Axes, go.FigureWidget)


   .. py:method:: plotPredictorPerformanceHeatmap(top_n: int = 0, active_only: bool = False, query: Union[str, dict] = None, facets: list = None, **kwargs) -> Union[matplotlib.pyplot.Axes, plotly.graph_objs.FigureWidget]

      Plots heatmap of the performance of the predictors

      By default, this plot shows the performance over all models
      Use the querying functionality to drill down into a more specific subset

      :param top_n: How many of the top predictors to show in the plot
      :type top_n: int, default = 0
      :param active_only: Whether to only plot active predictors
      :type active_only: bool, default = False
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None
      :param facets: Whether to add facets to the plot, should be a list of columns
      :type facets: list, default = None

      :keyword plotting_engine: One of {plotly, mpl}, see ADMDatamart class
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool

      .. rubric:: Notes

      See the docs for either the matplotlib plots (plots_mpl.py) or the
      plotly plots (plots_plotly.py). Some visualisations have parameters
      that differ slightly between the two, and plotly has an additional
      post_plot function defining some more actions, such as writing to
      html automatically or displaying figures while facetting.

      :rtype: (plt.Axes, go.FigureWidget)


   .. py:method:: plotImpactInfluence(ModelID: str = None, query: Union[str, dict] = None, **kwargs) -> matplotlib.pyplot.Axes

      Plots the impact and the influence of a given model's predictors

      :param ModelID: The selected model ID
      :type ModelID: str, default = None
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None
      :param facets: Whether to add facets to the plot, should be a list of columns
      :type facets: list, default = None

      :keyword plotting_engine: This chart is only supported in matplotlib (mpl)
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool

      .. rubric:: Notes

      See the docs for the matplotlib plots (plots_mpl.py).

      :rtype: plt.Axes


   .. py:method:: plotResponseGain(by: str = 'Channel', query: Union[str, dict] = None, **kwargs) -> plotly.graph_objs.FigureWidget

      Plots the cumulative response per model

      :param by: The column by which to calculate response gain
                 Default is Channel, to see the response/gain chart per channel
      :type by: str, default = Channel
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None
      :param facets: Whether to add facets to the plot, should be a list of columns
      :type facets: list, default = None

      :keyword plotting_engine: This chart is only supported in plotly
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool

      .. rubric:: Notes

      See the docs for the plotly plots (plots_plotly.py).
      Plotly has an additional post_plot function defining some more actions,
      such as writing to html automatically or displaying figures while facetting.

      :rtype: go.FigureWidget


   .. py:method:: plotModelsByPositives(by: str = 'Channel', query: Union[str, dict] = None, **kwargs) -> plotly.graph_objs.FigureWidget

      Plots the percentage of models vs the number of positive responses

      :param by: The column to calculate the model percentage by
      :type by: str, default = Channel
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None
      :param facets: Whether to add facets to the plot, should be a list of columns
      :type facets: list, default = None

      :keyword plotting_engine: This chart is only supported in plotly
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool

      .. rubric:: Notes

      See the docs for the plotly plots (plots_plotly.py).
      Plotly has an additional post_plot function defining some more actions,
      such as writing to html automatically or displaying figures while facetting.

      :rtype: go.FigureWidget


   .. py:method:: plotTreeMap(color_var: str = 'performance_weighted', by: str = 'ModelID', value_in_text: bool = True, midpoint: Optional[float] = None, query: Union[str, dict] = None, **kwargs) -> plotly.graph_objs.FigureWidget

      Plots a treemap to view performance over multiple context keys

      :param color: The column to set as the color of the squares
                    One out of:
                    {responsecount, responsecount_log, positives,
                    positives_log, percentage_without_responses,
                    performance_weighted, successrate}
      :type color: str, default = performance_weighted
      :param by: The column to use as the size of the squares
      :type by: str, default = Channel
      :param value_in_text: Whether to print the values of the swuares in the squares
      :type value_in_text: bool, default = True
      :param midpoint: A parameter to assert more control over the color distribution
                       Set near 0 to give lower values a 'higher' color
                       Set near 1 to give higher values a 'lower' color
                       Necessary for, for example, Success Rate, where rates lie very far apart
                       If not supplied in such cases, there is no difference in the color
                       between low values such as 0.001 and 0.1, so midpoint should be set low
      :type midpoint: Optional[float]
      :param query: The query to supply to _apply_query
                    If a string, uses the default Pandas query function
                    Else, a dict of lists where the key is the column name of the dataframe
                    and the corresponding value is a list of values to keep in the dataframe
      :type query: Union[str, dict], default = None
      :param facets: Whether to add facets to the plot, should be a list of columns
      :type facets: list, default = None

      :keyword colorscale: Give a list of hex values to override the default colors
                           Should consist of three colors: 'low', 'neutral' and 'high'
      :kwtype colorscale: list
      :keyword plotting_engine: This chart is only supported in plotly
      :kwtype plotting_engine: str
      :keyword return_df: If set to True, returns the dataframe instead of the plot
                          Can be useful for debugging or replicating the plots
      :kwtype return_df: bool

      .. rubric:: Notes

      See the docs for the plotly plots (plots_plotly.py).
      Plotly has an additional post_plot function defining some more actions,
      such as writing to html automatically or displaying figures while facetting.

      :rtype: go.FigureWidget



