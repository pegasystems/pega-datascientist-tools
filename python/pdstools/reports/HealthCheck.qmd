---
title: "ADM Health Check"
title-block-banner: true
author: "Pega data scientist tools"
date: today
subtitle: > 
  Summary of all ADM Models
format:
  html:
    code-fold: true
    embed-resources: true
    standalone: true
    code-tools: true
    toc: true
    toc-title: Table of Contents
    theme:
        light: flatly
    fontsize: smaller
jupyter: python3
---
```{python}
#| label: Imports
#| code-fold: true
#| code-summary: Python imports
#| output: false
import logging, sys
logging.disable()
import re
import subprocess
import datetime

from IPython.display import display, Markdown
sys.path.append('..')
from pdstools import datasets, ADMDatamart
from pdstools import cdh_utils
from pdstools import defaultPredictorCategorization
from plotly.offline import iplot
from itables import show, JavascriptFunction
import plotly.express as px
import plotly.graph_objs as go
import polars as pl
import pandas as pd
import numpy as np
from pdstools.utils import pega_template 
import math

# Convenience wrapper functions

def quarto_print(text):
    display(Markdown(text))

def quarto_callout_info(info):
    quarto_print(
"""
::: {.callout-note}
%s
:::
""" % info)

def quarto_callout_important(info):
    quarto_print(
"""
::: {.callout-important}
%s
:::
""" % info)

def quarto_callout_no_predictor_data_warning(extra = ""):
    quarto_callout_important(f"Predictor Data is not available. {extra}")

```


```{python}
#| tags: [parameters]
#| echo: false

# The kwargs argument is in support of the streamlit app specifically.
# The folder/filename arguments are in support of calling from a command line,
# using the same argument names as the stand-alone model report.
# When neither is passed in, it falls back to the sample data.

name = 'ADM Models' # TODO: what's this used for?
filters = dict() # TODO: not used?
kwargs = dict()

title = "ADM Model Overview" # pass in customer name here
subtitle = "" # typically used to pass in a date range or other qualification of the data source

datafolder = ""
modelfilename = ""
predictorfilename = ""

tables_max_rows = 200 # max number of rows for embedded tables
barchart_max_bars = 20 # max number of bars showing in bar charts
responsecount_analysis_threshold = 100 # TODO use everywhere instead of hardcoded value

globalQuery = None # TODO not used?

```

```{python}
#| echo: false

quarto_print(f"""
# {title}

## {subtitle}

"""
)

```


```{python}
#| tags: [initialization]
#| code-fold: true
#| code-summary: Initialization of the datamart class.

# Initialize the class after the parameters have been overwritten.

if len(kwargs)>0: 
    # streamlit call
    datamart = ADMDatamart(**kwargs, include_cols="pyFeatureImportance").fillMissing()
elif len(datafolder) > 0 or len(modelfilename) > 0 or len(predictorfilename) > 0:
    # command line call
    datamart = ADMDatamart(
        path = "." if len(datafolder) == 0 else datafolder, 
        model_filename = "" if len(modelfilename)==0 else modelfilename, 
        predictor_filename = "" if len(predictorfilename)==0 else predictorfilename)
else: 
    # fall back to sample data
    datamart = datasets.CDHSample()

last_data = (
    datamart.last(strategy='lazy')
    .with_columns(pl.col(pl.Categorical).cast(pl.Utf8))
    .with_columns(
        [
            pl.col(pl.Utf8).fill_null("NA"),
            pl.col(pl.Null).fill_null("NA"),
            pl.col("SuccessRate").fill_nan(0).fill_null(0),
            pl.col("Performance").fill_nan(0).fill_null(0),
            pl.col("ResponseCount").fill_null(0),
            (pl.concat_str("Channel/Direction".split("/"), separator="/")).alias("Channel/Direction"),
        ]
    )
).collect()

if datamart.predictorData is not None:
    datamart_all_columns = datamart.combinedData.columns
else:
    datamart_all_columns = datamart.modelData.columns

def columnExists(df, col):
    return(col in df.columns and df.schema[col] != pl.Null)    

def subsetToExistingColumns(cols):
    return([col for col in cols if col in datamart_all_columns])

standardNBADNames = [
    "Assisted_Click_Through_Rate",
    "CallCenter_Click_Through_Rate",
    "CallCenterAcceptRateOutbound",
    "Default_Inbound_Model",
    "Default_Outbound_Model",
    "Email_Click_Through_Rate",
    "Mobile_Click_Through_Rate",
    "OmniAdaptiveModel",
    "Other_Inbound_Click_Through_Rate",
    "Push_Click_Through_Rate",
    "Retail_Click_Through_Rate",
    "Retail_Click_Through_Rate_Outbound",
    "SMS_Click_Through_Rate",
    "Web_Click_Through_Rate",
]

currentConfigurationNames = datamart.modelData.select(pl.col('Configuration')).unique().collect().to_series(0).to_list()
configurationNamesInStandardNBADModelNames = [(c in standardNBADNames) for c in currentConfigurationNames]
```

This document gives a global overview of the Adaptive models and predictors. It is generated from a Python markdown file in the [Pega Data Scientist Tools](https://github.com/pegasystems/pega-datascientist-tools). This is open-source software and comes without guarantees. Off-line reports for individual
models can be created as well, see [Wiki](https://github.com/pegasystems/pega-datascientist-tools/wiki).

We provide guidance and best practices where possible. However these are  generic practices and may or may not be applicable to the specific use case and situation of the implementation. The recommendations are strongly geared towards the CDH use cases and may not apply to, for example, Process AI.


```{python}
# Start with a global bubble chart. Maybe later replace by
# some ADM metrics, e.g. overall AUC, CTR, some other things.
# TODO for the overall AUC chart would be nicer to color the
# bubbles by channel/direction
fig = datamart.plotPerformanceSuccessRateBubbleChart()

def set_fig_xaxis_modelperformance(fig, label="Model Performance"):
    fig = (
        fig.for_each_xaxis(lambda xaxis: xaxis.update(showticklabels=True, visible=True))
        .for_each_xaxis(lambda xaxis: xaxis.update(dict(
            tickmode = 'array',
            tickvals = [x for x in range(50,110,10)])))
        .update_xaxes(title=label, showticklabels=True, visible=True)
    )
    return(fig)

fig.layout.coloraxis.colorscale = pega_template.success

fig = (
    set_fig_xaxis_modelperformance(fig)
    .update_layout(autosize=True, height=400, title="All ADM Models", xaxis_title="Model Performance", yaxis_title="Success Rate")
    .update_yaxes(tickformat=",.3%")
    .update_coloraxes(showscale=False)
)

fig.show()
```

::: {.callout-tip title="Guidance"}
The [Plotly](https://plotly.com/python/) charts have [user controls for panning,
zooming etc](https://plotly.com/chart-studio-help/zoom-pan-hover-controls/) but
note that these interactive plots do not render well in portals like Sharepoint
or Box. It is preferable to view them from a browser.
:::

# Overview of Channels

In a typical NBAD setup, channels are served by both one channel specific model configuration as well as a cross-channel *OmniAdaptiveModel* configuration.

If a channel has two model configurations with a naming pattern like “Adm_12345678912”, this could indicate the usage of the (no longer recommended) “2-stage model” predictions for conversion modeling, generated by Prediction Studio.

```{python}
framework_usage = 'is being used' if all(configurationNamesInStandardNBADModelNames) else ('is being used with additional configurations' if any(configurationNamesInStandardNBADModelNames) else 'is not being used')

quarto_print(f"""
The standard Pega Next Best Action Designer framework defines a number
of standard Adaptive Models for channels. By looking at the names of the
configurations it seems that the framework **{framework_usage}**.
"""
)
```

::: {.callout-tip title="Guidance"}
* Look out for channels supported by more than two model configurations, although there may be valid reasons to do so (e.g. different sets of predictors for certain issues)
* Channels with no responses at all
* Channels with no positive feedback
:::

In the table below we show the overall numbers per channel and direction. The numbers are not guaranteed to be correct: in the ADM data we only have aggregate numbers, we need to make some assumptions about the configurations, especially about having only one ADM model per configuration for an individual action or treatment. In some use cases these assumptions may not hold, so the ultimate truth about these numbers should come from data that tracks all interactions.

```{python}
channel_overview = (
    datamart.modelData
    # first, take max per model ID
    .group_by(["Configuration", "ModelID"] + subsetToExistingColumns(["Channel", "Direction"]))
    .agg(
        pl.max("ResponseCount"), 
        pl.max("Positives")
    )
    # then, take sum of model max per configuration
    .group_by(["Configuration"] + subsetToExistingColumns(["Channel", "Direction"]))
    .agg(
        pl.sum("ResponseCount"), 
        pl.sum("Positives")
    )
    # finally, take the max of the configurations per channel
    .group_by(subsetToExistingColumns(["Channel", "Direction"]))
    .agg(
        pl.max("ResponseCount").round().alias("Responses"), 
        pl.max("Positives").round(),
        pl.format("{}%", ((pl.max("Positives") * 100 / pl.max("ResponseCount")).round(3))).alias("Base rate"),
        pl.col("Configuration").unique().alias("Supported by Configurations")
    )
    .sort(subsetToExistingColumns(["Channel", "Direction"]))
    .collect()
)

# TODO precision 0 is okay EXCEPT for the avg groups per issue, one decimal would be preferable, figure out the subset argument of format to do this

display(
    channel_overview.to_pandas().style
    .set_caption("Channel Overview")
    .hide(axis="index")
    .format(precision=0)
    # check positives and responses > 200, number of configurations <= 2
    # TODO there are simpler ways to check the range
    .apply(lambda x: ["background-color: orange" if (i >= 2 and i <= 3 and (v < 200)) else "" for i, v in enumerate(x)], axis = 1)
    .apply(lambda x: ["background-color: orangered" if (i >= 2 and i <= 3 and (v == 0)) else "" for i, v in enumerate(x)], axis = 1)
    .apply(lambda x: ["background-color: orange" if (i == 5 and len(v) > 2) else "" for i, v in enumerate(x)], axis = 1)
)
```


# Overview of the Actions

In a standard setup, the offers/conversations are presented as treatments for actions in a hierarchical structure setup in NBA Designer. Treatments are often channel specific and typically there are more unique treatments than there are actions.

Adaptive Models are created per treatment (at least in the default setup) and the recommendation is to stick the default context keys of the models.

```{python}
def nUniqueValues(fld):
    if not isinstance(fld, list):
        fld = [fld]
    fld = subsetToExistingColumns(fld)
    if len(fld) == 0:
        return(0)
    return(
        datamart.modelData
        .select(pl.col(fld))
        .drop_nulls()
        .collect()
        .n_unique())

def maxByHierarchy(fld, grouping):
    if not isinstance(fld, list):
        fld = [fld]
    fld = subsetToExistingColumns(fld)
    if len(fld) == 0:
        return(0)
    grouping = subsetToExistingColumns(grouping)
    if len(grouping) == 0:
        return(0)
    return(
        datamart.modelData
        .group_by(grouping)
        .agg(
            pl.col(fld).drop_nulls().n_unique()
        )
        .select(fld)
        .drop_nulls()
        .max()
        .collect()
        .item())

def avgByHierarchy(fld, grouping):
    if not isinstance(fld, list):
        fld = [fld]
    fld = subsetToExistingColumns(fld)
    if len(fld) == 0:
        return(0)
    grouping = subsetToExistingColumns(grouping)
    if len(grouping) == 0:
        return(0)
    return(
        datamart.modelData
        .group_by(grouping)
        .agg(
            pl.col(fld).drop_nulls().n_unique()
        )
        .select(fld)
        .drop_nulls()
        .mean()
        .collect()
        .item())

def sampleValues(fld, n=6):
    if not isinstance(fld, list):
        fld = [fld]
    fld = subsetToExistingColumns(fld)
    if len(fld) == 0:
        return("-")
    return(
        datamart.modelData
        .select(pl.concat_str(fld, separator="/").alias("__SampleValues__"))
        .drop_nulls()
        .collect()
        .to_series()
        .unique()
        .sort()
        .to_list()[:n])

df = pd.DataFrame({
    "Item" : [
        "Overall Number of Actions", 
        "Max number of Actions within an Issue and Group", 
        "Number of Treatments across all Actions",
        "Max number of Treatments per Channel",
        "Max number of Treatments for any single Action",
        "Number of unique Issues",
        "Average number of Groups per Issue",
        "Max number of Groups per Issue",
        "Channels"],
    "Number" : [
        nUniqueValues("Name"), 
        maxByHierarchy("Name", ["Issue", "Group"]), 
        nUniqueValues("Treatment"),
        maxByHierarchy("Treatment", ["Channel", "Direction"]),
        maxByHierarchy("Treatment", ["Name"]),
        nUniqueValues("Issue"),
        avgByHierarchy("Group", ["Issue"]),
        maxByHierarchy("Group", ["Issue"]),
        nUniqueValues(["Channel", "Direction"])],
    "(Example) Values" : [
        sampleValues("Name"), 
        "-", 
        sampleValues("Treatment"),
        "-",
        "-",
        sampleValues("Issue"),
        sampleValues("Group"),
        "-",
        sampleValues(["Channel", "Direction"])],
    "Best Practice" : [1000, 100, 2500, 1000, 5,  5, 0,  5, 0],
    "Cloud Service Limit" : [2500, 250, 5000, 2500, 5, 25,  float('inf'), 25,  float('inf')]

})

display(
    df.style
    .set_caption("Action Overview")
    .hide(axis="index")
    .format(precision=0)
    # TODO consider a styler function like not_in_between
    .apply(lambda x: ["background-color: orange" if (df.iloc[i, 1] < df.iloc[i, 3]) else "" for i, v in enumerate(x)], axis = 0, subset=['Number'])
    .apply(lambda x: ["background-color: orangered" if (df.iloc[i, 1] > df.iloc[i, 4] or df.iloc[i, 1] == 0) else "" for i, v in enumerate(x)], axis = 0, subset=['Number'])
)
```


::: {.callout-tip title="Guidance"}

-   Recommended best practice is to have multiple treatments for an
    action. Too few gives less opportunity for personalization of the
    interactions.
-   Pega Customer Decision Hub deployed in Pega Cloud has limits in
    place that constrain certain elements of the service and its use to
    ensure high quality of service for your team. Where relevant, these
    limits are used in the guidance in this health check. See [Service
    and data health limits for Pega Customer Decision Hub on Pega
    Cloud](https://docs-previous.pega.com/pega-customer-decision-hub-user-guide/87/service-and-data-health-limits-pega-customer-decision-hub-pega-cloud).
:::

## Success Rates per Channel

Showing the current success rate of the actions. Different channels usually have very different success rates.

```{python}
#| echo: false

quarto_print(f"""
Just showing the top {barchart_max_bars} here and limiting to the propositions that have received at least {responsecount_analysis_threshold} responses (the rates reported by the models are unreliable otherwise).
""")
```


::: {.callout-tip title="Guidance"}
- Look out for actions that stand out, having a far higher success rate than the rest. Check with business if that is expected.

- Variation in the set of offers across customers is also an important metric but not one that can be derived from the Adaptive Model data - this requires analysis of the actual interactions.
:::

```{python}
facet = "Channel/Direction"
hover_columns = subsetToExistingColumns(["Issue", "Group", "Name", "Treatment"])

df = (
    last_data.lazy()
    .with_columns(pl.concat_str(facet.split("/"), separator="/").alias(facet))
    .with_columns(pl.col(pl.Categorical).cast(pl.Utf8))
)
df = (
    df.filter(pl.col("ResponseCount") > responsecount_analysis_threshold)
    .select(hover_columns + ["ModelID", "Channel/Direction","SuccessRate"])
    .with_columns(
        pl.col("SuccessRate").round(4),
        pl.concat_str(subsetToExistingColumns(['Name', 'Treatment']), separator="/").alias("Label"))
    .sort(["Channel/Direction", "SuccessRate"], descending=True)
    .group_by(["Channel/Direction"])
    .head(barchart_max_bars)
    .collect()
)

hover_data = {
    "SuccessRate": ":.3%",
}
for col in hover_columns:
    hover_data[col] = ":.d"

facet = "Channel/Direction"
facet_col_wrap = 3
fig = px.bar(
    df,
    x="SuccessRate",
    y="ModelID",
    color="SuccessRate",
    facet_col=facet,
    facet_col_wrap=facet_col_wrap,
    template="pega",
    text="Label",
    title=("Success Rates per Channel<br><sup>%s</sup>" % "/".join(subsetToExistingColumns(['Name', 'Treatment']))),
    hover_data=hover_data,
)

# TODO: This counting of number of facets is generic, make common
unique_count = (
    last_data.lazy()
    .with_columns(pl.concat_str(facet.split("/"), separator="/").alias(facet))
    .select(facet)
    .collect()
    .to_series()
    .n_unique()
)
height = 200 + (math.ceil(unique_count / facet_col_wrap) * 250)

fig = (
    fig.update_xaxes(tickformat=",.2%", tickangle=45, title="", matches=None)
    .update_yaxes(matches=None, showticklabels=False, visible=False, autorange="reversed")
    .update_traces(textposition="inside")
    .for_each_annotation(
        lambda a: a.update(text=a.text.replace("Channel/Direction=", "")))
    .update(layout_coloraxis_showscale=False)
    .update_layout(autosize=True, height=height)
)

display(fig)
```

## All Success Rates

Showing the success rates of all actions in an interactive
tree map. Green is higher, red are lower success rates.

```{python}

fig = datamart.plotTreeMap(
    color_var="SuccessRate",
    group_by_col=None,
    levels=subsetToExistingColumns(["Configuration",'Channel', 'Direction', 'Issue', 'Group', "Name", "Treatment"]), 
    colorscale=pega_template.success,
    title='All Action Success Rates',
    query=pl.col("ResponseCount")>responsecount_analysis_threshold) 

fig = (
    fig.update_coloraxes(showscale=False)
    .update_layout(autosize=True)
)

fig.show()
```

## Success Rates over Time

Showing how the overall channel success rates evolved over the time that the data export covers. Split by Channel and model configuration. Usually there are separate model configurations for different channels but sometimes there are also additional model configurations for different outcomes (e.g. conversion) or different customers (e.g. anonymous).

::: {.callout-tip title="Guidance"}
- There shouldn’t be too sudden changes over time
:::

```{python}
facet = "Configuration"

# TODO check the color scheme used - pds tools to supply color schemes for channel dimension, for predictor categorization, etc etc
response_threshold_query = pl.col("ResponseCount") > responsecount_analysis_threshold # this whole query may be something global

fig = datamart.plotOverTime(
    'SuccessRate', 
    by="Channel/Direction", 
    # TODO this function does not have a proper title argument
    facets=facet, 
    facet_col_wrap=2, query=response_threshold_query)

# TODO this counting of # facets and determining the height can be shared
unique_count = (
    datamart.modelData
    .with_columns(pl.concat_str(facet.split("/"), separator="/").alias(facet))
    .select(facet)
    .collect()
    .unique()
    .shape[0])
height = 200 + (math.ceil( unique_count / 2) * 250)

fig = (
    fig.update_yaxes(matches=None, title="", showticklabels=True)
    .update_xaxes(showticklabels=True, title="")
    .update_layout(autosize=True, height=height)
    .for_each_annotation(lambda a: a.update(text=a.text.replace(f"{facet}=", ""))))

# TODO title stuff doesnt need to be here if std plot supports it
fig.update_layout(title=f"Trend of Success Rates per Channel<br><sup>Query: {response_threshold_query}</sup>")

fig.show()
```

# Overview of Adaptive Models

```{python}
n_unique_models = len(last_data.select('ModelID').unique()) # TODO or uniqueN ?

quarto_print(f"""
There are a total of **{n_unique_models}** Adaptive Models in the latest snapshot.
"""
)
```

In the standard configuration there is one Adaptive model per treatment/action for a configuration.

```{python}
action_dim_agg = [pl.col("Name").n_unique().alias("Number of Actions")]
if columnExists(last_data, "Treatment"):
    action_dim_agg += [pl.col("Treatment").n_unique().alias("Number of Treatments")]

model_overview = (
    last_data
    .group_by(["Configuration"] + subsetToExistingColumns(["Channel", "Direction"]))
    .agg(
        action_dim_agg +
        [pl.col("ModelID").n_unique().alias("Number of Models")]
    )
    .with_columns(
        [
            pl.col("Configuration").is_in(standardNBADNames).alias("Standard in NBAD Framework"),
            (pl.col("Number of Models") / pl.col("Number of Actions")).round(2).alias("Average number of Models per Action"),
        ]
    )
    .sort(["Configuration", "Channel", "Direction"])
)

# TODO apply background styling like in the R version
display(
    model_overview.head(tables_max_rows).to_pandas(use_pyarrow_extension_array=True).style
    .set_caption("Model Overview")
    .hide(axis="index")
    .format(precision=2)
)

```

## Model Performance 

### Model Performance vs Action Success Rates (the Bubble Chart)

This “Bubble Chart” - similar to the standard ADM models overview in Pega Prediction Studio - shows the relation between model performance and proposition success rates. The size of the bubbles indicates the number of responses.

::: {.callout-tip title="Guidance"}

-   Bubbles stacked up against the left-hand vertical axis represent
    actions/treatments for which the models are not predictive. These
    models may be still be ramping up, or they may not have
    enough features to work with: consider if new/better predictors can
    be added.

-   Charts should not be empty or contain only a few bubbles. Such
    charts may represent channels or configurations not (or no longer) used.

-   Bubbles at the bottom of the charts represent propositions with very
    low success rates - they may not be compelling enough.

-   In an ideal scenario you will see the larger bubbles more on the
    top-right, so more volume for propositions with higher success rates
    and better models.

-   There should - very roughly - be a positive correlation between success
    rate and performance and between response counts and performance.

-   There should be variation in response counts (not all dots of equal
    size)

-   For small volumes of good models, see if the engagement rules in the
    Decision Strategy are overly restrictive or reconsider the
    arbitration of the propositions so they get more (or less) exposure.
:::

```{python}
facet_col_wrap=2
facet = 'Configuration/Channel/Direction'

fig = datamart.plotPerformanceSuccessRateBubbleChart(facets=facet,facet_col_wrap=facet_col_wrap)

fig.layout.coloraxis.colorscale = pega_template.success

height = 250 + (math.ceil( len(fig.layout.annotations) / facet_col_wrap) * 270)

fig = (
    set_fig_xaxis_modelperformance(fig, label="")
    .update_layout(autosize=True, height=height, title="All ADM Models")
    .for_each_annotation(lambda a: a.update(text=a.text.replace(f"{facet}=", "")))
    .update_layout(font=dict(size=10))
    .for_each_annotation(lambda a: a.update(text="<br> ".join(a.text.split("/", 1))))
    .update_yaxes(tickformat=",.3%", title="")
    .update_coloraxes(showscale=False, colorbar_len = 1 / math.ceil( len(fig.layout.annotations) / facet_col_wrap))
)

fig.show()
```

On the x-axis Model Performance measured in AUC-ROC, on the y-axis the Success Rate of the models (#positives / #responses).

### Model Performance over Time

The trend chart shows how model performance evolves over time. Note that ADM is by default configured to track performance over *all* time. You can configure a window for monitoring but this is not commonly done. In Pega Prediction Studio you can monitor models per month, year etc.

::: {.callout-tip title="Guidance"}
- No abrupt changes but gradual upward trend is good
:::

```{python}
facet = "Configuration"

fig = datamart.plotOverTime('weighted_performance', by="Channel/Direction", facets=facet, facet_col_wrap=2)

# TODO below code is repeated, it just calculates the
# number of facets
unique_count = datamart.modelData.with_columns(pl.concat_str(facet.split("/"), separator="/").alias(facet)).select(facet).collect().unique().shape[0]
height = 200 + (math.ceil( unique_count / 2) * 250)

fig = (
    fig.update_layout(autosize=True, height=height, title="Trend of Model Performance")
    .for_each_annotation(
        lambda a: a.update(text=a.text.replace(f"{facet}=", "")))
    .update_yaxes(showticklabels=True, title = "")
    .update_xaxes(title = "")
)

fig.show()
```

### Model performance of all the actions

Using an interactive treemap to visualize the performance. Red is lower performance, green is higher (better) performance.

It can be interesting to see which issues, groups or channels can be better predicted than others. Identifying categories of items for which the predictions are poor can help to drive the search for better predictors, for example.

```{python}
fig = datamart.plotTreeMap(
    color_var="performance_weighted", 
    group_by_col= None, 
    levels=subsetToExistingColumns(["Configuration",'Channel', 'Direction', 'Issue', 'Group', "Name", "Treatment"]))

fig = (
    fig.update_layout(
        title="Overview of Model Performance",showlegend=False)
    .update_coloraxes(showscale=False)
)

fig.show()
```

### Response counts for all the actions

Using an interactive treemap to visualize the response counts.
Different channels will have very different numbers but within one channel the relative differences in response counts give an indication how skewed the distribution is.

Warning : Currently treemap calculates mean response count moving upwards in the hierarchy. 

::: {.callout-tip title="Guidance"}

If there are actions that have a much higher response count than the rest see why that is. Possibly they are levered up for valid business reasons.
:::


```{python}
fig = datamart.plotTreeMap(
    color_var="responsecount", 
    levels=subsetToExistingColumns(["Configuration",'Channel', 'Direction', 'Issue', 'Group', "Name", "Treatment"]), 
    colorscale=pega_template.negative_positive)

fig = (
    fig.update_layout(
        title="Overview of Response Counts", 
        showlegend=False)
    .update_coloraxes(showscale=False)
)

fig.show()
```

# Analysis of Predictors

```{python}
#| output: asis
#| echo: false
if datamart.predictorData is None:
    quarto_callout_no_predictor_data_warning("All the below analyses based on predictor data will be empty.")
```

This analysis looks at the predictors that are driving the models.

The predictors are categorized (by color) by their “source”. 

This is something that can be configured when reading the data. By default it simply takes the first part before the dot in the predictor name, so this typically distinguishes between e.g. *Customer*, *Account*, *IH* and parameterized (*Param.*) predictors.

You can customize this (when reading in the data) to add patterns to identify for example external scores.

## Number of Predictors per model configuration 

This shows the total number of predictors per model configuration (this includes both active and inactive predictors).

Note that the total number of predictors in the model data does not always equate the data from the more detailed view split by category below.

```{python}
if datamart.predictorData is not None:

    context_aggregations = []
    if columnExists(datamart.combinedData, "Channel"):
        context_aggregations += [pl.col("Channel").unique().alias("Used in (Channels)")]
    if columnExists(datamart.combinedData, "Issue"):
        context_aggregations += [pl.col("Issue").unique().alias("Used for (Issues)")]

    predictors_per_configuration = (
        datamart.combinedData
        .filter(pl.col("EntryType") != "Classifier")
        .group_by("Configuration")
        .agg([pl.col("PredictorName").unique().count().alias("Predictor Count")] + context_aggregations)
        .sort("Configuration")
        .collect()
    )

    display(
        predictors_per_configuration.to_pandas().style
        .set_caption("Number of Predictors per Configuration")
        .hide(axis="index")
        # TODO: create a highlight_not_between function to make this cleaner
        .highlight_between(right=200, inclusive='neither', axis=1, props='background-color:orange;', subset='Predictor Count')
        .highlight_between(left=700, inclusive='neither', axis=1, props='background-color:red;', subset='Predictor Count')
    )
    
else:
    quarto_callout_no_predictor_data_warning()

```

## Number of Predictors per Predictor Category

Split by category (defaults to the string before the first dot, can be overridden when reading the data).

The numbers here can differ from the totals above, these ones are leading.

::: {.callout-tip title="Guidance"}
- Total number of predictors per model 200 - 700 to stay within service limits
- There should be some “IH” predictors but no more than ca 100 of them
- No more than a few dozen Param predictors
- Consistency in the numbers across configurations
:::

```{python}
if datamart.predictorData is not None:

    predictors_per_category = (
        datamart.combinedData
        .filter(pl.col("EntryType") != "Classifier")
        .group_by(["Configuration", "PredictorCategory"])
        .agg([pl.col("PredictorName").n_unique().alias("Predictor Count")])
        .sort(["Configuration", "PredictorCategory"])
        .collect()
        .pivot(
            values = "Predictor Count", 
            index = "Configuration",
            columns = "PredictorCategory",
            maintain_order = True)
        .fill_null(0)
    )

    display(
        predictors_per_category.to_pandas().style
        .set_caption("Number of Predictors per Predictor Category")
        .hide(axis="index")
        .format(precision=0)
        # TODO add highlighting
    )
    
else:
    quarto_callout_no_predictor_data_warning()

```

## Predictor Importance across all models per configuration

Box plots of the predictor importance. Predictor importance is using the 
univariate predictor performance.

::: {.callout-tip title="Guidance"}
* You expect most predictors to have a spread in the performance range, doing better for some actions than for others
* Predictors only showing as a single bar (no range) are suspicious
* A variation of predictors from different categories in the top 30
* A min/max of the univariate AUC performance somewhere between 55 and 75
:::

```{python}
# TODO: Uses feature importance if available in the datamart
# drop our own calculations of feature importance. Would be nice to
# be able to toggle in the graph (with a tab)
# TODO see if the > 200 check actually works 
# TODO see why the categorization does not work
# TODO consistent coloring for predictor categories

# to_plot = (
#     "FeatureImportance"
#     if "FeatureImportance" in datamart_all_columns
#     else "Performance"
# )

if datamart.predictorData is not None:
    figs = datamart.plotPredictorPerformance(
        top_n=30, 
        facets="Configuration", 
        separate=True, 
        active_only=False,
        to_plot="Performance",
        query=pl.col('ResponseCount') > 200
    )
    if not isinstance(figs, list):
        figs = [figs]
    for fig in figs:
        fig.update_traces(width=0.3)
        fig.update_layout(font=dict(size=10), height=700, yaxis_title="")
        fig.layout.xaxis.tickformat = ".d"

        fig.show()
else:
    quarto_callout_no_predictor_data_warning()
```

## Importance by Predictor Category 
Aggregating up to the category of the predictors. This gives a view at a glance of how well e.g. interaction history, external model scores or contextual data are doing overall.

### Predictor Category performance per Channel/Direction/Issue 

```{python}
#| error: true

if datamart.predictorData is not None:
    facets = 'Configuration/Channel/Direction'
    facet_col_wrap = 3
    fig = datamart.plotPredictorCategoryPerformance(facets=facets, facet_col_wrap=facet_col_wrap)

    fig.update_layout(font=dict(size=10))
    fig.for_each_annotation(
        lambda a: a.update(text=a.text.replace(f"{facets}=", ""))
    )
    fig.for_each_annotation(lambda a: a.update(text=" <br> ".join(a.text.split("/"))))

    facet_list = []
    for data in fig.data:
        facet_list.append(data["yaxis"][1:])
    facet_count = len(set(facet_list))

    height = 200 + (math.ceil( facet_count/ facet_col_wrap) * 250)
    fig.update_layout(autosize=True, height=height)
    fig.show() 
else:
    quarto_callout_no_predictor_data_warning()

```

### Relative Predictor Category importance per Configuration
Although the same could be achieved using the standard **plotPredictorImportance** method, now that we only split by Configuration this allows for a more compact visualization using a stacked bar chart.

```{python}

''' By dividing a predictor category's weighted performance to the sum of all predictor categories weighted performance in a configuration, creates a plot that displays relative importance of categories in a configuration.
Changes the Predictor performance range from 50-100 to 0-100 in order to increase visibilty of performance differences among categories.'''

if datamart.predictorData is not None:
    fig = datamart.plotPredictorContribution()
    height = 200 + (math.ceil(len(datamart.modelData.select(pl.col("Configuration").unique()).collect()['Configuration'].to_list()) / 2) * 50)
    fig.update_layout(height=height)
    fig.update_yaxes(
        automargin=True,
        dtick=1,
    )
    fig.show()
else:
    quarto_callout_no_predictor_data_warning()
```

## Bad predictors across all models
See if there are predictors that are just always perform poorly.

::: {.callout-tip title="Guidance"}
- Predictors that consistently perform poorly could potentially be removed.
- Be sure to check for data problems
- Note we advise to be careful with predictor removal. Only remove if there is clearly no future value to other propositions as well or if there is always a related predictor that performs better.
:::

```{python}
# weighted performance
# TODO apply highlighting in the std way like in the R version

if datamart.predictorData is not None:
    responses_column_index = datamart.bad_predictors.columns.index("Response Count")
    bad_predictors = datamart.bad_predictors.to_pandas(
        use_pyarrow_extension_array=False
    )

    show(
        bad_predictors.head(tables_max_rows),
        scrollX=True,
        columnDefs=[
            {
                "className": "dt-left",
                "targets": [responses_column_index],
                "createdCell": JavascriptFunction(
                    """
function (td, cellData, rowData, row, col) {
    if (cellData < 200) {
        $(td).css('color', 'red')
    }
}
"""
                ),
            }
        ],
    )
else:
    quarto_callout_no_predictor_data_warning()
```

## Number of Active and Inactive Predictors
Showing the number of active and inactive predictors per model.

::: {.callout-tip title="Guidance"}

- We expect a few dozen active predictors for every model instance

:::

```{python}
if datamart.predictorData is not None:
    facets= ["Configuration"]
    fig = datamart.plotPredictorCount(facets = facets)

    height = 250 + (math.ceil(len(fig.layout.annotations) / 2) * 270)
    fig.update_layout(autosize=True, height=height)
    fig.update_yaxes(categoryorder="array", automargin=True, dtick=1)
    fig.for_each_annotation(
        lambda a: a.update(text=a.text.replace(f"{facets[0]}=", ""))
    )
    fig.show()
else:
    quarto_callout_no_predictor_data_warning()
```

## Predictor Performance across Actions

A view of predictor performance across all propositions, ordered so that the best performing predictors are at the top and the best performing action/treatments are on the left. Green indicates good performance, red means more problematic - either too low or too good to be true.

Note that this view is really only useful when there is a limited number of actions.

```{python}
index_cols = subsetToExistingColumns(['Issue', 'Group', "Name", "Treatment"])

if datamart.predictorData is not None:
    unique_configurations = datamart.combinedData.collect().get_column("Configuration").unique().to_list()
    for conf in unique_configurations:
        try:
            fig = datamart.plotPredictorPerformanceHeatmap(
                top_n=barchart_max_bars,
                by="/".join(index_cols),
                query = pl.col("Configuration")==conf,
                tickangle=45
            )
            fig.update_layout(
                xaxis={
                    "tickmode": "array",
                    "tickvals": fig.data[0]["x"],
                    "ticktext": [
                        "..." + tick[-25:] if len(tick) > 25 else tick for tick in fig.data[0]["x"]
                    ],
                },
                font=dict(size=8),
                title=f"Top predictors over {conf}"
            )

            fig.update(layout_coloraxis_showscale=False)

            fig.show()
            
        except:
            # TODO: add error message instead of typing "an error"
            # should we even handle the exception here?
            print(f"Plot was not drawn for {conf} because of an error")    
else:
    quarto_callout_no_predictor_data_warning()
```

## Missing values

If a predictor is low performing: are there too many missing values? This could point to a technical problem
Missing % is number of missing vs all responses, really just a filter on model data
This TreeMap only shows the fields that have any missing values.

```{python}
if datamart.predictorData is not None:
    path = subsetToExistingColumns(["Configuration", "PredictorCategory", "PredictorName"])
    gb_cols = path
    path = [px.Constant("All Models")] + path 

    missing = datamart.last(table = "combinedData").filter(pl.col("PredictorName") != "Classifier").group_by(gb_cols).agg(
        pl.col("BinResponseCount")
        .where(pl.col("BinSymbol") == "MISSING")
        .sum()
        .alias("MissingCount"),
        pl.sum("BinResponseCount").alias("BinResponseCount")
    ).with_columns(
        (pl.col("MissingCount") / pl.col("BinResponseCount")).alias("Percentage without responses")
    ).filter((~pl.col("Percentage without responses").is_nan()))

    hover_data = {
        "Percentage without responses": ":.2%",
    }

    fig = px.treemap(
        missing.to_pandas(),
        path=path,
        color="Percentage without responses",
        template="pega",
        hover_data=hover_data,
        title="Missing Data in Adaptive Models",
    )

    fig.layout.coloraxis.colorscale =  pega_template.positive_negative
    fig.update_coloraxes(showscale=False)

    fig.show()
else:
    quarto_callout_no_predictor_data_warning()

```

## Residuals

TODO: similar to analysis of the MISSING bin we can do something for the
Residual bin - the bin in categorical predictors that acts as an overflow
bin. Too much in there is not good. Also, the sheer number of distinct
values could be good to analyse, but we don't have that exactly.

# Responses

In the sections below we check which of these models have reached certain reliability (or “maturity”) thresholds. This is based on heuristics on both the number of positives (> 200 considered mature) and performance.

## Empty and Immature Models

All below lists are guidance. There should be just a small percentage of immature or empty models overall.

### Models that have never been used

These models have no responses at all: no positives but also no negatives. The models for these actions/treatments exist, so they must have been created in the evaluation of the actions/treatments, but they were never selected to show to the customer, so never received any responses.

Often these represent actions that never made it into production and were only used to test out logic. But it could also be that the response mechanism is broken. It could for example be caused by outcome labels that are returned by the channel application not matching the configuration of the adaptive models.

```{python}
empty_or_immature_overviews_cols = subsetToExistingColumns([
    "Configuration",
    "Channel",
    "Direction",
    "Issue",
    "Group",
    "Name",
    "Treatment",
    "ResponseCount",
    "Positives"
])

zero_response = (
    last_data
    .select(empty_or_immature_overviews_cols)
    .filter(pl.col("ResponseCount") == 0))

if zero_response.shape[0] > 0:
    quarto_print(f"There are {zero_response.shape[0]} models with no responses at all:")
    
    show(zero_response.to_pandas(use_pyarrow_extension_array=True).head(tables_max_rows), scrollX = True)
else:
    quarto_callout_info("All models have received at least 1 response.")
```

### Models that have have been used but never received a positive response

These models have been used but never received a “positive” response. This means the action/treatments that these models represent have been selected, so an “impression” has been made to the customer, but they never received a “positive” response.

This could be because no customer ever found the proposition attractive, but it could also be because the response loop is not working correctly. Possibly Pega “believes” the user received the action but the actual channel application did never show it.

```{python}
zero_positives = (
    last_data.select(empty_or_immature_overviews_cols)
    .filter(pl.col("Positives") == 0)
    .filter(pl.col("ResponseCount") > 0)
    .sort("ResponseCount"))

if zero_positives.shape[0] > 0:
    quarto_print(f"There are {zero_positives.shape[0]} models with responses but no positives:")

    show(zero_positives.to_pandas(use_pyarrow_extension_array=True).head(tables_max_rows), scrollX = True)
else:
    quarto_callout_info("All models that have received feedback have received at least 1 positive response.")

```

### Models that are still in an immature phase of learning

These models have received at least one positive response but not enough yet to be qualified to be fully “mature” - a concept that matters especially for outbound channels.

These actions are typically new and still in early phases of learning.

We show the “reach” of these actions as the percentage of the population that would be selected by the standard maturity capping algorithm in the NBA framework (which selects 2% for new models and 100% for models with 200 or more positive responses).


```{python}
def calc_reach(x=pl.col("Positives")):
    return 0.02 + 0.98 * (pl.min_horizontal([pl.lit(200), x]) / 200)

immature_models = (
    last_data.select(empty_or_immature_overviews_cols) 
    .filter((pl.col("Positives") < 200) & (pl.col("Positives") > 0))
    .sort("Positives")
    .with_columns(pl.format("{}%", (pl.lit(100) * calc_reach()).round(2)).alias('Outbound Default Reach'))
)

if immature_models.shape[0] > 0:
    quarto_print(f"There are {immature_models.shape[0]} models with positive responses but fewer than 200:")

    reach = immature_models.to_pandas(use_pyarrow_extension_array=True).head(tables_max_rows)
    # reach.style.format({'Reach': '{:,.2%}'.format})
    show(reach, scrollX=True)

else:
    quarto_callout_info("All non-empty models have received at least 200 positives.")
```

### Models that have received sufficient responses but are still at their minimum performance 

These models have received over 200 positives but still show the minimum model performance.

This could be an indication of data problems, or not having the right predictors but may also be caused by technical aspects like the order of the responses to the model.

```{python}
minimum_performance = (
    last_data
    .select(empty_or_immature_overviews_cols + ['Performance'])
    .filter(pl.col("Performance") == 0.5)
    .filter(pl.col("Positives") >= 200)  
    .sort("ResponseCount"))

if minimum_performance.shape[0] > 0:
    quarto_print(f"There are {minimum_performance.shape[0]} models with sufficient evidence but still at minimum performance:")

    show(minimum_performance.to_pandas(use_pyarrow_extension_array=True).head(tables_max_rows), scrollX = True)
else:
    quarto_callout_info("All models with over 200 positive responses are above the minimum performance.")

```

## Number of Empty/Immature Models over time 

In the analysis below we count the number of models in each of the groups analysed before and show how that \ncount changes over time. The expectation is that the number of “non-empty” models increases steadily and the other lines are more or less stable.\n
Empty is defined as having no responses at all. Immature is defined as having < 200 positives, and no performance means model performance is still the initial 0.5 value while having matured already according to the definition.

::: {.callout-tip title="Guidance"}
- Empty models shouldnt be increasing too much
- Good models (AUC 55-80) should increase or at least not decrease
- Good models should be much higher than problem kids
:::

```{python}
by= ["SnapshotTime", "Channel", "Direction"]
df = (
    datamart.modelData
    .with_columns(pl.col(pl.Categorical).cast(pl.Utf8))
    .with_columns(pl.col(pl.Utf8).fill_null("Missing"))
    .group_by(by)
    .agg(
        [
            (pl.col("Positives") >= 200).sum().alias("Mature Models"),
            (pl.col("ResponseCount")==0).sum().alias("Empty Models"),
            (pl.col("Positives")==0).sum().alias("Models w/o Positives"),
            ((pl.col("Positives") > 0) & (pl.col("Positives") < 200 )).sum().alias("Immature Models"),
            (pl.col("Performance")==0.5).sum().alias("Models w/o Performance"),
            (pl.col("ResponseCount")!=0).sum().alias("Number of non-empty Models")
        ]
    )
    .sort(["Channel","Direction","SnapshotTime"], descending=True)
)
facet_col_wrap=3
facet = "Channel/Direction"
df = df.with_columns(pl.concat_str(facet.split("/"), separator="/").alias(facet)).with_columns(pl.col(facet).cast(pl.Utf8).fill_null("NA"))
df_pd = df.collect().to_pandas()
y = df_pd.iloc[:,len(by):].columns.tolist() #slice `df.columns` to get this easily
fig = px.line(df_pd,
    x="SnapshotTime",
    y=y,
    facet_col = facet,
    title="Immature and Empty Models over Time",
    template="pega",
    facet_col_wrap=facet_col_wrap,
    color_discrete_sequence=px.colors.qualitative.D3
    )
fig.for_each_annotation(
    lambda a: a.update(text=a.text.replace(f"{facet}=", ""))
)
fig.for_each_xaxis(lambda xaxis: xaxis.update(title=""))

unique_count = len(fig.layout["annotations"])
height = 200 + (math.ceil( unique_count / facet_col_wrap) * 250)
fig.update_layout(
    autosize=True, 
    height=height, 
    yaxis_title="Number of Models")

fig.show()
```

## Number of Responses over time 


```{python}
# TODO: make this daily so not continuously rising

facets = "Configuration"
facet_col_wrap = 2
response_counts = datamart.plotOverTime('ResponseCount', by="Channel/Direction", facets=facets, facet_col_wrap=facet_col_wrap, mode="Cumulative")

unique_count = datamart.modelData.select(facets).unique().collect().shape[0]
height = 200 + (math.ceil( unique_count / 2) * 250)
response_counts.update_layout(autosize=True, height=height)
response_counts.for_each_annotation(
    lambda a: a.update(text=a.text.replace(f"{facets}=", ""))
)
response_counts.for_each_xaxis(lambda xaxis: xaxis.update(title=""))
response_counts.update_layout(
    yaxis_title="Response Count")

response_counts.show()
```

# Which Models drive most of the Volume

## Analysis of skewness of the Responses
Showing the cumulative response count vs the number of models. Is there a larger percentage of models that take the vast majority of the responses?

If this line strongly deviates from the diagonal it means that relatively few models drive the majority of the responses.

In the left-hand plot we look at all responses, which really means that we are looking at “impressions” mostly. The right-hand plot looks at just the positives. Typically, the positives are driven more strongly by the models so often you see more skewness in that one.

However very skewed results may be caused by prioritization elements like levers and weights and can be a reason to check in with business and verify that this is expected.

::: {.callout-tip title="Guidance"}
- Area under this curve should be > 0.5 and perhaps more towards 1 - most of the responses driven by relatively few actions
:::


::: {layout-ncol=2}
```{python}
#| output: asis

fig = datamart.plotResponseGain()

fig.update_layout(title="Cumulative Responses", height=300, width=300)
fig.add_shape(type="line", x0=0, y0=0, x1=1, y1=1, line=dict(color="grey", dash="dash"))
fig.update_yaxes(scaleanchor="x", scaleratio=1)

cdh_utils.legend_color_order(fig).show()
```

```{python}
#| output: asis

# TODO: The gains for cum positives is not doing what it is supposed
# to do. Make gains plot more generic gains - accept a DF with any x/y values
# run a cumulative and show percentages
# TODO: Instead of just channel should be channel + direction as usual

fig = datamart.plotResponseGain(query=pl.col("Positives") > 0)

fig.update_layout(title="Cumulative Positives", height=300, width=300)
fig.add_shape(type="line", x0=0, y0=0, x1=1, y1=1, line=dict(color="grey", dash="dash"))
fig.update_yaxes(scaleanchor="x", scaleratio=1)

cdh_utils.legend_color_order(fig).show()
```

:::

## Models with largest number of responses (positive or negative)

Zooming in into the models that drive most of the responses.

```{python}
#| echo: false

quarto_print(f"""
Here we list the top {barchart_max_bars} models with the highest number of responses.
""")
```

```{python}
# TODO better colors, shorter content in the bars
# nicer colors perhaps - maybe a gradient
# code seems overly complex for what it is doing

facet = '/'.join(subsetToExistingColumns(['Configuration', 'Issue', 'Group', 'Name', 'Channel', 'Direction']))

response_frequency_data = last_data

for split_facet in facet.split("/"):
    response_frequency_data = response_frequency_data.with_columns(
        pl.col(split_facet).cast(pl.Utf8).fill_null("NA")
    )
response_frequency_data = response_frequency_data.with_columns(pl.concat_str(facet.split("/"), separator="/").alias(facet))

response_counts = response_frequency_data.group_by([facet] + facet.split("/")).agg(
    [
        pl.sum("ResponseCount").alias("all_responses"),
        pl.sum("Positives").alias("positive_sum")
        ]
    )

all_responses = response_counts.sort("all_responses", descending=False).tail(barchart_max_bars)
hover_data = {
    facet: False
}
for col in facet.split("/"):
    hover_data[col] = ":.d"

# TODO we really want Channel+Direction everywhere where we just use Channel now
possible_color_vars = ['Channel', 'Issue', 'Name']
color = next((col for col in possible_color_vars if col in datamart_all_columns), None)

fig = px.bar(
    all_responses.to_pandas(use_pyarrow_extension_array=True), 
    x = "all_responses", 
    y=facet, 
    color=color, 
    title=f"Top {barchart_max_bars} Highest Responses", 
    template="pega", 
    text=facet, 
    hover_data=hover_data)

fig = (
    fig.update_yaxes(matches=None, showticklabels=False, visible=False)
    .update_traces(textposition="inside")
    .for_each_annotation(lambda a: a.update(text=a.text.replace(facet, "")))
    .update_layout(yaxis={'categoryorder':'total ascending'}, xaxis_title="Responses")
)

cdh_utils.legend_color_order(fig).show() # ?
```

## Models with largest number of positive responses. 

```{python}
#| echo: false

quarto_print(f"""
And these are the {barchart_max_bars} models with the largest number of positives.
""")
```

```{python}
positives = response_counts.sort("positive_sum", descending=True).head(barchart_max_bars)

fig = px.bar(
    positives.to_pandas(use_pyarrow_extension_array=True), 
    x = "positive_sum", 
    y = facet, 
    color=color, 
    title=f"Top {barchart_max_bars} Highest Positives", 
    template="pega", 
    text=facet, 
    hover_data=hover_data)

fig = (
    fig.update_yaxes(matches=None, showticklabels=False, visible=False)
    .update_xaxes(matches=None)
    .update_traces(textposition='inside')
    .for_each_annotation(lambda a: a.update(text=a.text.replace(facet, "")))
    .update_layout(yaxis={'categoryorder':'total ascending'}, xaxis_title="Positives")
)

cdh_utils.legend_color_order(fig).show() # ?
```

## Analysis of Performance vs Volume

Is most volume driven by models that have a good predictive performance? Ideally yes, so the targeting of the customers is optimal. If a lot of volume is driven by models that are not very predictive, this could be a reason to look into the available predictor data.

The plot below shows this relation. Horizontally the model performance (the AUC, ranging from 50 to 100 as Pega usually scales this), descretized into a number of ranges, and vertically the percentage of responses.

A lot of volume on the first bins, where the performance is minimal, means that a lot of immature models are used. This is sub-optimal in terms of targeting. Ideally there is a smooth curve with a peak in the 60-80 range of AUC. Much higher AUC’s are possibly indicative of immature models or even outcome leakers (although that is effectively prevented by the standard delayed learning pattern). AUC’s below 60 are not uncommon but should be investigated - consider different predictors or outcomes.
```{python}
#| error: true
to_plot = "Performance"
df = (
    datamart.modelData.with_columns(pl.col(to_plot) * 100)
    .group_by([to_plot, "Channel", "Direction"])
    .agg(pl.sum("ResponseCount"))
    .with_columns(pl.col(to_plot).round(2))
    .collect()
)

breaks = [percentile for percentile in range(50, 100, 3)]
df = df.with_columns(pl.col("Performance").cut(breaks=breaks).alias("PerformanceBin"))

grouped = df.group_by(["Channel", "PerformanceBin"]).agg(
    pl.sum("ResponseCount"), pl.min(to_plot).alias("break_label")
)
out = (
    grouped.sort(["Channel", "break_label"])
    .select(
        [
            pl.col("Channel").cast(pl.Utf8),
            "PerformanceBin",
            "ResponseCount",
            pl.col("ResponseCount").sum().over("Channel").alias("sum"),
        ]
    )
    .with_columns([(pl.col("ResponseCount") / pl.col("sum")).alias("Volume")])
)

fig = px.bar(
    out,
    x="PerformanceBin",
    y="Volume",
    color="Channel",
    template="pega",
    barmode="overlay",
)
for bar in fig.data:
  bar.visible = "legendonly"

channels = out["Channel"].unique()
for channel_num, channel in enumerate(channels):
    channel_df = out.filter(pl.col("Channel") == channel) 
    fig.add_traces(go.Scatter(x = channel_df["PerformanceBin"], y=channel_df["Volume"], line_shape = 'spline', marker_color = fig.data[channel_num].marker.color, name=channel))


fig.update_yaxes(tickformat=",.0%")
fig.update_layout(
    title="Performance vs Volume",
    xaxis_title="Model Performance",
    yaxis_title="Percentage of Responses"
)

cdh_utils.legend_color_order(fig).show()
```

## Positives vs. Number of Models
Ideally, all models have received plenty of responses which will make them “mature” and makes sure they are as predictive as possible.

Often we see that there is a significant percentage of models that are still relatively new and have not received much feedback (yet). Below graph shows the percentages of models that have fewer than 200 positives.

Having many on the left-hand side (with very low or perhaps no positives) may or not be a problem. The models may still be there in the datamart but might represent actions/treatments that are not active. 

```{python}
fig = datamart.plotModelsByPositives()

fig.update_layout(
    title="Positives vs Number of Models",
    xaxis_title="Number of Positives",
    yaxis_title="Percentage of Models"
)

fig = cdh_utils.legend_color_order(fig)

fig.show()
```

# Propensity Analysis

The distribution of propensities returned by the models is yet a different angle.

Higher propensities clearly indicate the offers are more attractive - people apparenty click/accept/convert more often.

## Success Rate Distribution

TODO: implement like in the R version of the health check

## Propensity Distribution

In a more emphathetic setup, you would expect that the distribution of the propensities leans towards the right-hand side: more volume to more attractive offers, although the relation is of course more complex, we are not just blindly pushing the offers with the highest success rates, but take a personalized approach.

Often however, multiple factors are included in the prioritization, changing this picture.

Note that the propensity bins are not of equal width. Propensities are typically very low so with an equal width distribution, almost all volume would be in the first bins. The binning here is based on (roughly) equal volume across all data.

So when one of the graphs shows more volume on the left, that is to be interpreted as relative to the other graphs.

```{python}
#| error: true

# TODO: fix this. Also looks like a lot of code.

to_plot = "Propensity"
if to_plot == "Propensity" and to_plot not in datamart.predictorData.columns:
    to_plot = "BinPropensity"
df = (
    datamart.combinedData.filter(pl.col("PredictorName") != "Classifier")
    .group_by([to_plot, "Channel", "Direction"])
    .agg(pl.sum("BinResponseCount"))
    .with_columns(pl.col(to_plot).round(4).cast(pl.Float64))
    .collect()
)
color_col = "Channel"
smallest_bin = 0

for color in df.get_column(color_col).unique().to_list():
    color_df = df.filter(pl.col(color_col) == color)
    propensity_list = list(
        set(
            color_df.select(to_plot)
            .fill_null(0)
            .fill_nan(0)
            .filter(pl.col(to_plot) > 0)
            .get_column(to_plot)
            .to_list()
        )
    )
    if len(propensity_list) > 0:
        if np.percentile(propensity_list, 10) > smallest_bin:
            smallest_bin = np.percentile(propensity_list, 10)
            cut_off_value = np.percentile(
                propensity_list, [percentile for percentile in range(0, 101, 5)]
            )

df_pl = df.with_columns(
    pl.col(to_plot)
    .fill_null(0)
    .fill_nan(0)
    .cut(breaks=cut_off_value)
    .alias(f"{to_plot}_range")
)

grouped = df_pl.group_by(["Channel", f"{to_plot}_range"]).agg(
    pl.sum("BinResponseCount"), pl.min(to_plot).alias("break_label")
)

out = (
    grouped.sort(["Channel", "break_label"])
    .select(
        [
            "Channel",
            f"{to_plot}_range",
            "break_label",
            "BinResponseCount",
            pl.col("BinResponseCount").sum().over("Channel").alias("sum"),
        ]
    )
    .with_columns([(pl.col("BinResponseCount") / pl.col("sum")).alias("Responses")])
)

out = out.sort(["Channel", "break_label"])
fig = px.bar(
    out,
    x=f"{to_plot}_range",
    y="Responses",
    color=color_col,
    template="pega",
    barmode="overlay",
)
fig.update_yaxes(tickformat=",.0%")

fig.show()
```

## Propensity Thresholding

TODO: Implement like in the R version

# Credits

```{python}
# unfortunately no way to get the quarto source file name, so that is hardcoded
quarto_source = 'pega-datascientist-tools/python/pdstools/reports/HealthCheck.qmd'

def get_cmd_output(args):
    result = subprocess.run(args, stdout=subprocess.PIPE).stdout.decode('utf-8').split('\n')
    return(result)

def get_version_only(versionstr):
    return(re.sub('[^.\d]','',versionstr))

def get_pip_package_version(pck):
    package_info = get_cmd_output(['pip', 'show', pck])
    package_version = package_info[1]
    return(get_version_only(package_version))

quarto_version = get_version_only(get_cmd_output(['quarto', '--version'])[0])
pandoc_version = get_version_only(get_cmd_output(["pandoc", "--version"])[0])
python_version = get_version_only(get_cmd_output([sys.executable, '--version'])[0])
timestamp_str = datetime.datetime.now().strftime("%d %b %Y %H:%M:%S")

quarto_print(f"""

| Tool | Version |
|-----|------|
| Notebook | {quarto_source} |
| Quarto | {quarto_version} |
| Pandoc | {pandoc_version} |
| PDS Tools | {get_pip_package_version('pdstools')} |
| Polars | {get_pip_package_version('polars')} |
| Jupyter Notebook format | {get_pip_package_version('nbformat')} (nbformat)|
| Python | {python_version} |
| Created at | {timestamp_str} |

""")

```

For more information please see the [Pega Data Scientist Tools](https://github.com/pegasystems/pega-datascientist-tools).
