:py:mod:`pdstools.ih.legacy_IH`
===============================

.. py:module:: pdstools.ih.legacy_IH


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pdstools.ih.legacy_IH.initial_prep
   pdstools.ih.legacy_IH.detect_outlier
   pdstools.ih.legacy_IH.get_all_times_inds
   pdstools.ih.legacy_IH.get_total_outcome
   pdstools.ih.legacy_IH.get_accept_rate
   pdstools.ih.legacy_IH.get_accept_rate_time
   pdstools.ih.legacy_IH.plot_daily_accept_rate
   pdstools.ih.legacy_IH.plot_weekly_accept_rate
   pdstools.ih.legacy_IH.plot_daily_cumulative_accept_rate
   pdstools.ih.legacy_IH.get_daily_graph
   pdstools.ih.legacy_IH.plot_outcome_count_time
   pdstools.ih.legacy_IH.get_allDays_df
   pdstools.ih.legacy_IH.get_total_outcome_share_per_level
   pdstools.ih.legacy_IH.plot_outcome_share_graph
   pdstools.ih.legacy_IH.get_outcome_share_time
   pdstools.ih.legacy_IH.select_date_range_lookback
   pdstools.ih.legacy_IH.get_delta_df
   pdstools.ih.legacy_IH.plot_share_delta_graph



.. py:function:: initial_prep(df, referenceTime='pxOutcomeTime')


.. py:function:: detect_outlier(df, col)


.. py:function:: get_all_times_inds(df)


.. py:function:: get_total_outcome(df, outcome, rollup)


.. py:function:: get_accept_rate(df, pos, neg, rollup)


.. py:function:: get_accept_rate_time(df, pos, neg, level, **kwargs)


.. py:function:: plot_daily_accept_rate(df, pos, neg, **kwargs)


.. py:function:: plot_weekly_accept_rate(df, pos, neg, **kwargs)


.. py:function:: plot_daily_cumulative_accept_rate(df, pos, neg, **kwargs)


.. py:function:: get_daily_graph(df, x, y, **kwargs)


.. py:function:: plot_outcome_count_time(df, outcome, time, **kwargs)


.. py:function:: get_allDays_df(_df, inds_df, hue)


.. py:function:: get_total_outcome_share_per_level(df, outcome, level)


.. py:function:: plot_outcome_share_graph(df, outcome, level, hue=None)


.. py:function:: get_outcome_share_time(df, outcome, level, time='daily')


.. py:function:: select_date_range_lookback(df, lookback=3)


.. py:function:: get_delta_df(df, outcome, level, dates)


.. py:function:: plot_share_delta_graph(df, outcome, level, dates)


